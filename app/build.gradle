apply plugin: 'com.android.application'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.1"

    defaultConfig {
        applicationId "com.udacity.gradle.builditbigger"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        // Enabling multidex support.
        multiDexEnabled true
        testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildTypes.each {
        it.buildConfigField 'String', 'TEST_DEVICE_ID', ' "5305B8C6893FE4F3FF66234C569F0D5A" '
    }
    productFlavors {
        free {
            applicationId "com.udacity.gradle.builditbigger.free"
        }
        paid {
            applicationId "com.udacity.gradle.builditbigger.paid"
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':javajokes')
    compile project(':androidlibrary')
    // Added for AdMob
    freeCompile 'com.google.android.gms:play-services:9.2.1'
    compile 'com.android.support:appcompat-v7:24.1.1'
    compile project(path: ':backend', configuration: 'android-endpoints')
}

task startServer(dependsOn: ':backend:appengineRun') {
    project(':backend').afterEvaluate { backend ->
        backend.extensions.appengine.daemon = true
    }
    doLast {
        println 'Server has started running'
    }
}

task runTests(dependsOn: ":app:connectedCheck") {
    doLast {
        println "Tests have been completed."
    }
}

task stopServer(dependsOn: ':backend:appengineStop'){
    doLast {
        println "Server has been stopped."
    }
}

task completeTest(dependsOn: ["startServer", "runTests", "stopServer"]) {
    doLast {
        println "Complete Test Completed"
    }
}

runTests.mustRunAfter "startServer"
runTests.finalizedBy "stopServer"


